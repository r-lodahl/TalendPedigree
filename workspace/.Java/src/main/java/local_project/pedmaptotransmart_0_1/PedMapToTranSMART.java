// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.pedmaptotransmart_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
import java.io.*;
import java.util.*;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: PedMapToTranSMART Purpose: <br>
 * Description: Nimmt eine PED- und eine MAP-Datei entgegen und formartiert diese so, dass sie mittels des tranSMART-Batch-Loaders in eine tranSMART-Umgebung importiert werden k√∂nnen. <br>
 * @author user@talend.com
 * @version 6.4.1.20170623_1246
 * @status 
 */
public class PedMapToTranSMART implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "PedMapToTranSMART";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					PedMapToTranSMART.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(PedMapToTranSMART.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSampleRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tHashInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class pedGeneHeaderStruct implements
			routines.system.IPersistableRow<pedGeneHeaderStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String GeneHeader1;

		public String getGeneHeader1() {
			return this.GeneHeader1;
		}

		public String GeneHeader2;

		public String getGeneHeader2() {
			return this.GeneHeader2;
		}

		public String GeneHeader3;

		public String getGeneHeader3() {
			return this.GeneHeader3;
		}

		public String GeneHeader4;

		public String getGeneHeader4() {
			return this.GeneHeader4;
		}

		public String GeneHeader5;

		public String getGeneHeader5() {
			return this.GeneHeader5;
		}

		public String GeneHeader6;

		public String getGeneHeader6() {
			return this.GeneHeader6;
		}

		public String GeneHeader7;

		public String getGeneHeader7() {
			return this.GeneHeader7;
		}

		public String GeneHeader8;

		public String getGeneHeader8() {
			return this.GeneHeader8;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.GeneHeader1 = readString(dis);

					this.GeneHeader2 = readString(dis);

					this.GeneHeader3 = readString(dis);

					this.GeneHeader4 = readString(dis);

					this.GeneHeader5 = readString(dis);

					this.GeneHeader6 = readString(dis);

					this.GeneHeader7 = readString(dis);

					this.GeneHeader8 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.GeneHeader1, dos);

				// String

				writeString(this.GeneHeader2, dos);

				// String

				writeString(this.GeneHeader3, dos);

				// String

				writeString(this.GeneHeader4, dos);

				// String

				writeString(this.GeneHeader5, dos);

				// String

				writeString(this.GeneHeader6, dos);

				// String

				writeString(this.GeneHeader7, dos);

				// String

				writeString(this.GeneHeader8, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("GeneHeader1=" + GeneHeader1);
			sb.append(",GeneHeader2=" + GeneHeader2);
			sb.append(",GeneHeader3=" + GeneHeader3);
			sb.append(",GeneHeader4=" + GeneHeader4);
			sb.append(",GeneHeader5=" + GeneHeader5);
			sb.append(",GeneHeader6=" + GeneHeader6);
			sb.append(",GeneHeader7=" + GeneHeader7);
			sb.append(",GeneHeader8=" + GeneHeader8);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pedGeneHeaderStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class GenHeadersStruct implements
			routines.system.IPersistableRow<GenHeadersStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(GenHeadersStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				GenHeadersStruct GenHeaders = new GenHeadersStruct();
				row6Struct row6 = new row6Struct();
				pedGeneHeaderStruct pedGeneHeader = new pedGeneHeaderStruct();

				/**
				 * [tHashOutput_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_1", false);
				start_Hash.put("tHashOutput_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("pedGeneHeader"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tHashOutput_1 = 0;

				class BytesLimit65535_tHashOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tHashOutput_1().limitLog4jByte();

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<pedGeneHeaderStruct> tHashFile_tHashOutput_1 = null;
				String hashKey_tHashOutput_1 = "tHashFile_PedMapToTranSMART_"
						+ pid + "_tHashOutput_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_1)) {
					if (mf_tHashOutput_1.getResourceMap().get(
							hashKey_tHashOutput_1) == null) {
						mf_tHashOutput_1
								.getResourceMap()
								.put(hashKey_tHashOutput_1,
										new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<pedGeneHeaderStruct>(
												org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_1 = mf_tHashOutput_1
								.getResourceMap().get(hashKey_tHashOutput_1);
					} else {
						tHashFile_tHashOutput_1 = mf_tHashOutput_1
								.getResourceMap().get(hashKey_tHashOutput_1);
					}
				}
				int nb_line_tHashOutput_1 = 0;

				/**
				 * [tHashOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				pedGeneHeaderStruct pedGeneHeader_tmp = new pedGeneHeaderStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"GenHeaders" + iterateId, 0, 0);

					}
				}

				int tos_count_tSampleRow_1 = 0;

				class BytesLimit65535_tSampleRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSampleRow_1().limitLog4jByte();

				String[] rangetSampleRow_1 = "1".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer
								.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i]
								.split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0])
								.intValue(); j < Integer.valueOf(
								edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				GenHeadersStruct GenHeaders_tmp = new GenHeadersStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				class BytesLimit65535_tFileInputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "C:/TalendOS/workspace/in.ped";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/TalendOS/workspace/in.ped", "US-ASCII",
								"\t", "\n", false, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row1.Column0 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row1.Column1 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row1.Column2 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row1.Column3 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row1.Column4 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row1.Column5 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row1.Column6 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row1.Column7 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row1.Column8 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							row1.Column9 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 10;

							row1.Column10 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 11;

							row1.Column11 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							row1.Column12 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							row1.Column13 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								GenHeaders = null;

								// # Output table : 'GenHeaders'
								GenHeaders_tmp.Column6 = row1.Column6;
								GenHeaders_tmp.Column7 = row1.Column7;
								GenHeaders_tmp.Column8 = row1.Column8;
								GenHeaders_tmp.Column9 = row1.Column9;
								GenHeaders_tmp.Column10 = row1.Column10;
								GenHeaders_tmp.Column11 = row1.Column11;
								GenHeaders_tmp.Column12 = row1.Column12;
								GenHeaders_tmp.Column13 = row1.Column13;
								GenHeaders = GenHeaders_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "GenHeaders"
							if (GenHeaders != null) {

								/**
								 * [tSampleRow_1 main ] start
								 */

								currentComponent = "tSampleRow_1";

								// GenHeaders
								// GenHeaders

								if (execStat) {
									runStat.updateStatOnConnection("GenHeaders"
											+ iterateId, 1, 1);
								}

								nb_line_tSampleRow_1++;

								if (!rangeSettSampleRow_1
										.contains(nb_line_tSampleRow_1)) {
									row6 = null;
								} else {
									row6 = new row6Struct();

									row6.Column6 = GenHeaders.Column6;

									row6.Column7 = GenHeaders.Column7;

									row6.Column8 = GenHeaders.Column8;

									row6.Column9 = GenHeaders.Column9;

									row6.Column10 = GenHeaders.Column10;

									row6.Column11 = GenHeaders.Column11;

									row6.Column12 = GenHeaders.Column12;

									row6.Column13 = GenHeaders.Column13;

								}

								tos_count_tSampleRow_1++;

								/**
								 * [tSampleRow_1 main ] stop
								 */
								// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									// row6
									// row6

									if (execStat) {
										runStat.updateStatOnConnection("row6"
												+ iterateId, 1, 1);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										pedGeneHeader = null;

										// # Output table : 'pedGeneHeader'
										pedGeneHeader_tmp.GeneHeader1 = row6.Column6
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno1"));
										pedGeneHeader_tmp.GeneHeader2 = row6.Column7
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno2"));
										pedGeneHeader_tmp.GeneHeader3 = row6.Column8
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno3"));
										pedGeneHeader_tmp.GeneHeader4 = row6.Column9
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno4"));
										pedGeneHeader_tmp.GeneHeader5 = row6.Column10
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno5"));
										pedGeneHeader_tmp.GeneHeader6 = row6.Column11
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno6"));
										pedGeneHeader_tmp.GeneHeader7 = row6.Column12
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno7"));
										pedGeneHeader_tmp.GeneHeader8 = row6.Column13
												.equals(null) ? ""
												: String.valueOf(globalMap
														.get("geno8"));
										pedGeneHeader = pedGeneHeader_tmp;
										// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch "pedGeneHeader"
									if (pedGeneHeader != null) {

										/**
										 * [tHashOutput_1 main ] start
										 */

										currentComponent = "tHashOutput_1";

										// pedGeneHeader
										// pedGeneHeader

										if (execStat) {
											runStat.updateStatOnConnection(
													"pedGeneHeader" + iterateId,
													1, 1);
										}

										pedGeneHeaderStruct oneRow_tHashOutput_1 = new pedGeneHeaderStruct();

										oneRow_tHashOutput_1.GeneHeader1 = pedGeneHeader.GeneHeader1;
										oneRow_tHashOutput_1.GeneHeader2 = pedGeneHeader.GeneHeader2;
										oneRow_tHashOutput_1.GeneHeader3 = pedGeneHeader.GeneHeader3;
										oneRow_tHashOutput_1.GeneHeader4 = pedGeneHeader.GeneHeader4;
										oneRow_tHashOutput_1.GeneHeader5 = pedGeneHeader.GeneHeader5;
										oneRow_tHashOutput_1.GeneHeader6 = pedGeneHeader.GeneHeader6;
										oneRow_tHashOutput_1.GeneHeader7 = pedGeneHeader.GeneHeader7;
										oneRow_tHashOutput_1.GeneHeader8 = pedGeneHeader.GeneHeader8;

										tHashFile_tHashOutput_1
												.put(oneRow_tHashOutput_1);
										nb_line_tHashOutput_1++;

										tos_count_tHashOutput_1++;

										/**
										 * [tHashOutput_1 main ] stop
										 */

									} // End of branch "pedGeneHeader"

								} // End of branch "row6"

							} // End of branch "GenHeaders"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/TalendOS/workspace/in.ped") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"GenHeaders" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tHashOutput_1 end ] start
				 */

				currentComponent = "tHashOutput_1";

				globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("pedGeneHeader"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tHashOutput_1", true);
				end_Hash.put("tHashOutput_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tHashOutput_1 finally ] start
				 */

				currentComponent = "tHashOutput_1";

				/**
				 * [tHashOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class mapOutStruct implements
			routines.system.IPersistableRow<mapOutStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String STUDY_ID;

		public String getSTUDY_ID() {
			return this.STUDY_ID;
		}

		public String SUBJ_ID;

		public String getSUBJ_ID() {
			return this.SUBJ_ID;
		}

		public String SnpChromosone;

		public String getSnpChromosone() {
			return this.SnpChromosone;
		}

		public String SnpId;

		public String getSnpId() {
			return this.SnpId;
		}

		public Integer SnpGeneticPosition;

		public Integer getSnpGeneticPosition() {
			return this.SnpGeneticPosition;
		}

		public Integer SnpPhysicalPosition;

		public Integer getSnpPhysicalPosition() {
			return this.SnpPhysicalPosition;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.SnpChromosone == null) ? 0
								: this.SnpChromosone.hashCode());

				result = prime * result
						+ ((this.SnpId == null) ? 0 : this.SnpId.hashCode());

				result = prime
						* result
						+ ((this.SnpGeneticPosition == null) ? 0
								: this.SnpGeneticPosition.hashCode());

				result = prime
						* result
						+ ((this.SnpPhysicalPosition == null) ? 0
								: this.SnpPhysicalPosition.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mapOutStruct other = (mapOutStruct) obj;

			if (this.SnpChromosone == null) {
				if (other.SnpChromosone != null)
					return false;

			} else if (!this.SnpChromosone.equals(other.SnpChromosone))

				return false;

			if (this.SnpId == null) {
				if (other.SnpId != null)
					return false;

			} else if (!this.SnpId.equals(other.SnpId))

				return false;

			if (this.SnpGeneticPosition == null) {
				if (other.SnpGeneticPosition != null)
					return false;

			} else if (!this.SnpGeneticPosition
					.equals(other.SnpGeneticPosition))

				return false;

			if (this.SnpPhysicalPosition == null) {
				if (other.SnpPhysicalPosition != null)
					return false;

			} else if (!this.SnpPhysicalPosition
					.equals(other.SnpPhysicalPosition))

				return false;

			return true;
		}

		public void copyDataTo(mapOutStruct other) {

			other.STUDY_ID = this.STUDY_ID;
			other.SUBJ_ID = this.SUBJ_ID;
			other.SnpChromosone = this.SnpChromosone;
			other.SnpId = this.SnpId;
			other.SnpGeneticPosition = this.SnpGeneticPosition;
			other.SnpPhysicalPosition = this.SnpPhysicalPosition;

		}

		public void copyKeysDataTo(mapOutStruct other) {

			other.SnpChromosone = this.SnpChromosone;
			other.SnpId = this.SnpId;
			other.SnpGeneticPosition = this.SnpGeneticPosition;
			other.SnpPhysicalPosition = this.SnpPhysicalPosition;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.STUDY_ID = readString(dis);

					this.SUBJ_ID = readString(dis);

					this.SnpChromosone = readString(dis);

					this.SnpId = readString(dis);

					this.SnpGeneticPosition = readInteger(dis);

					this.SnpPhysicalPosition = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STUDY_ID, dos);

				// String

				writeString(this.SUBJ_ID, dos);

				// String

				writeString(this.SnpChromosone, dos);

				// String

				writeString(this.SnpId, dos);

				// Integer

				writeInteger(this.SnpGeneticPosition, dos);

				// Integer

				writeInteger(this.SnpPhysicalPosition, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STUDY_ID=" + STUDY_ID);
			sb.append(",SUBJ_ID=" + SUBJ_ID);
			sb.append(",SnpChromosone=" + SnpChromosone);
			sb.append(",SnpId=" + SnpId);
			sb.append(",SnpGeneticPosition="
					+ String.valueOf(SnpGeneticPosition));
			sb.append(",SnpPhysicalPosition="
					+ String.valueOf(SnpPhysicalPosition));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mapOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SnpChromosone,
					other.SnpChromosone);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpId, other.SnpId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpGeneticPosition,
					other.SnpGeneticPosition);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpPhysicalPosition,
					other.SnpPhysicalPosition);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String _Chromosone;

		public String get_Chromosone() {
			return this._Chromosone;
		}

		public String SnpId;

		public String getSnpId() {
			return this.SnpId;
		}

		public Integer SnpGenPos;

		public Integer getSnpGenPos() {
			return this.SnpGenPos;
		}

		public Integer SnpPhyPos;

		public Integer getSnpPhyPos() {
			return this.SnpPhyPos;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this._Chromosone = readString(dis);

					this.SnpId = readString(dis);

					this.SnpGenPos = readInteger(dis);

					this.SnpPhyPos = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Chromosone, dos);

				// String

				writeString(this.SnpId, dos);

				// Integer

				writeInteger(this.SnpGenPos, dos);

				// Integer

				writeInteger(this.SnpPhyPos, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Chromosone=" + _Chromosone);
			sb.append(",SnpId=" + SnpId);
			sb.append(",SnpGenPos=" + String.valueOf(SnpGenPos));
			sb.append(",SnpPhyPos=" + String.valueOf(SnpPhyPos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _FamilyId;

		public String get_FamilyId() {
			return this._FamilyId;
		}

		public String SubjId;

		public String getSubjId() {
			return this.SubjId;
		}

		public String FatherId;

		public String getFatherId() {
			return this.FatherId;
		}

		public String MotherId;

		public String getMotherId() {
			return this.MotherId;
		}

		public String Sex;

		public String getSex() {
			return this.Sex;
		}

		public String Phenotype;

		public String getPhenotype() {
			return this.Phenotype;
		}

		public String Genotype1;

		public String getGenotype1() {
			return this.Genotype1;
		}

		public String Genotype2;

		public String getGenotype2() {
			return this.Genotype2;
		}

		public String Genotype3;

		public String getGenotype3() {
			return this.Genotype3;
		}

		public String Genotype4;

		public String getGenotype4() {
			return this.Genotype4;
		}

		public String Genotype5;

		public String getGenotype5() {
			return this.Genotype5;
		}

		public String Genotype6;

		public String getGenotype6() {
			return this.Genotype6;
		}

		public String Genotype7;

		public String getGenotype7() {
			return this.Genotype7;
		}

		public String Genotype8;

		public String getGenotype8() {
			return this.Genotype8;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this._FamilyId == null) ? 0 : this._FamilyId
								.hashCode());

				result = prime * result
						+ ((this.SubjId == null) ? 0 : this.SubjId.hashCode());

				result = prime
						* result
						+ ((this.FatherId == null) ? 0 : this.FatherId
								.hashCode());

				result = prime
						* result
						+ ((this.MotherId == null) ? 0 : this.MotherId
								.hashCode());

				result = prime * result
						+ ((this.Sex == null) ? 0 : this.Sex.hashCode());

				result = prime
						* result
						+ ((this.Phenotype == null) ? 0 : this.Phenotype
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this._FamilyId == null) {
				if (other._FamilyId != null)
					return false;

			} else if (!this._FamilyId.equals(other._FamilyId))

				return false;

			if (this.SubjId == null) {
				if (other.SubjId != null)
					return false;

			} else if (!this.SubjId.equals(other.SubjId))

				return false;

			if (this.FatherId == null) {
				if (other.FatherId != null)
					return false;

			} else if (!this.FatherId.equals(other.FatherId))

				return false;

			if (this.MotherId == null) {
				if (other.MotherId != null)
					return false;

			} else if (!this.MotherId.equals(other.MotherId))

				return false;

			if (this.Sex == null) {
				if (other.Sex != null)
					return false;

			} else if (!this.Sex.equals(other.Sex))

				return false;

			if (this.Phenotype == null) {
				if (other.Phenotype != null)
					return false;

			} else if (!this.Phenotype.equals(other.Phenotype))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other._FamilyId = this._FamilyId;
			other.SubjId = this.SubjId;
			other.FatherId = this.FatherId;
			other.MotherId = this.MotherId;
			other.Sex = this.Sex;
			other.Phenotype = this.Phenotype;
			other.Genotype1 = this.Genotype1;
			other.Genotype2 = this.Genotype2;
			other.Genotype3 = this.Genotype3;
			other.Genotype4 = this.Genotype4;
			other.Genotype5 = this.Genotype5;
			other.Genotype6 = this.Genotype6;
			other.Genotype7 = this.Genotype7;
			other.Genotype8 = this.Genotype8;

		}

		public void copyKeysDataTo(row9Struct other) {

			other._FamilyId = this._FamilyId;
			other.SubjId = this.SubjId;
			other.FatherId = this.FatherId;
			other.MotherId = this.MotherId;
			other.Sex = this.Sex;
			other.Phenotype = this.Phenotype;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this._FamilyId = readString(dis);

					this.SubjId = readString(dis);

					this.FatherId = readString(dis);

					this.MotherId = readString(dis);

					this.Sex = readString(dis);

					this.Phenotype = readString(dis);

					this.Genotype1 = readString(dis);

					this.Genotype2 = readString(dis);

					this.Genotype3 = readString(dis);

					this.Genotype4 = readString(dis);

					this.Genotype5 = readString(dis);

					this.Genotype6 = readString(dis);

					this.Genotype7 = readString(dis);

					this.Genotype8 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._FamilyId, dos);

				// String

				writeString(this.SubjId, dos);

				// String

				writeString(this.FatherId, dos);

				// String

				writeString(this.MotherId, dos);

				// String

				writeString(this.Sex, dos);

				// String

				writeString(this.Phenotype, dos);

				// String

				writeString(this.Genotype1, dos);

				// String

				writeString(this.Genotype2, dos);

				// String

				writeString(this.Genotype3, dos);

				// String

				writeString(this.Genotype4, dos);

				// String

				writeString(this.Genotype5, dos);

				// String

				writeString(this.Genotype6, dos);

				// String

				writeString(this.Genotype7, dos);

				// String

				writeString(this.Genotype8, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_FamilyId=" + _FamilyId);
			sb.append(",SubjId=" + SubjId);
			sb.append(",FatherId=" + FatherId);
			sb.append(",MotherId=" + MotherId);
			sb.append(",Sex=" + Sex);
			sb.append(",Phenotype=" + Phenotype);
			sb.append(",Genotype1=" + Genotype1);
			sb.append(",Genotype2=" + Genotype2);
			sb.append(",Genotype3=" + Genotype3);
			sb.append(",Genotype4=" + Genotype4);
			sb.append(",Genotype5=" + Genotype5);
			sb.append(",Genotype6=" + Genotype6);
			sb.append(",Genotype7=" + Genotype7);
			sb.append(",Genotype8=" + Genotype8);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._FamilyId, other._FamilyId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SubjId, other.SubjId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.FatherId, other.FatherId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.MotherId, other.MotherId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Sex, other.Sex);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Phenotype, other.Phenotype);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row8Struct row8 = new row8Struct();
				mapOutStruct mapOut = new mapOutStruct();

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_4 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowToIterate_2 = 0;

				class BytesLimit65535_tFlowToIterate_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_2().limitLog4jByte();

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				class BytesLimit65535_tFileInputDelimited_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_5().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				try {

					Object filename_tFileInputDelimited_5 = "C:/TalendOS/workspace/in.ped";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0
								|| random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/TalendOS/workspace/in.ped", "US-ASCII",
								"\t", "\n", true, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null
							&& fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						row9 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row9 = new row9Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							columnIndexWithD_tFileInputDelimited_5 = 0;

							row9._FamilyId = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							row9.SubjId = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							row9.FatherId = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							row9.MotherId = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							row9.Sex = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 5;

							row9.Phenotype = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 6;

							row9.Genotype1 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 7;

							row9.Genotype2 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 8;

							row9.Genotype3 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 9;

							row9.Genotype4 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 10;

							row9.Genotype5 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 11;

							row9.Genotype6 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 12;

							row9.Genotype7 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 13;

							row9.Genotype8 = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row9 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row9"
						if (row9 != null) {

							/**
							 * [tFlowToIterate_2 main ] start
							 */

							currentComponent = "tFlowToIterate_2";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							globalMap.put("row9._FamilyId", row9._FamilyId);

							globalMap.put("row9.SubjId", row9.SubjId);

							globalMap.put("row9.FatherId", row9.FatherId);

							globalMap.put("row9.MotherId", row9.MotherId);

							globalMap.put("row9.Sex", row9.Sex);

							globalMap.put("row9.Phenotype", row9.Phenotype);

							globalMap.put("row9.Genotype1", row9.Genotype1);

							globalMap.put("row9.Genotype2", row9.Genotype2);

							globalMap.put("row9.Genotype3", row9.Genotype3);

							globalMap.put("row9.Genotype4", row9.Genotype4);

							globalMap.put("row9.Genotype5", row9.Genotype5);

							globalMap.put("row9.Genotype6", row9.Genotype6);

							globalMap.put("row9.Genotype7", row9.Genotype7);

							globalMap.put("row9.Genotype8", row9.Genotype8);

							nb_line_tFlowToIterate_2++;
							counter_tFlowToIterate_2++;
							globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
									counter_tFlowToIterate_2);

							tos_count_tFlowToIterate_2++;

							/**
							 * [tFlowToIterate_2 main ] stop
							 */
							NB_ITERATE_tFileInputDelimited_4++;

							if (execStat) {
								runStat.updateStatOnConnection("row8", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("mapOut", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection(
										"iterate2",
										1,
										"exec"
												+ NB_ITERATE_tFileInputDelimited_4);
								// Thread.sleep(1000);
							}

							/**
							 * [tFileOutputDelimited_1 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_1", false);
							start_Hash.put("tFileOutputDelimited_1",
									System.currentTimeMillis());

							currentComponent = "tFileOutputDelimited_1";

							if (execStat) {
								if (resourceMap.get("inIterateVComp") == null) {

									runStat.updateStatOnConnection("mapOut"
											+ iterateId, 0, 0);

								}
							}

							int tos_count_tFileOutputDelimited_1 = 0;

							class BytesLimit65535_tFileOutputDelimited_1 {
								public void limitLog4jByte() throws Exception {

								}
							}

							new BytesLimit65535_tFileOutputDelimited_1()
									.limitLog4jByte();

							String fileName_tFileOutputDelimited_1 = "";
							fileName_tFileOutputDelimited_1 = (new java.io.File(
									"C:/TalendOS/workspace/mapOut.txt"))
									.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_1 = null;
							String extension_tFileOutputDelimited_1 = null;
							String directory_tFileOutputDelimited_1 = null;
							if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_1
										.lastIndexOf(".") < fileName_tFileOutputDelimited_1
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(0,
													fileName_tFileOutputDelimited_1
															.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
										.substring(0,
												fileName_tFileOutputDelimited_1
														.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_1
										.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(0,
													fileName_tFileOutputDelimited_1
															.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1
													.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								}
								directory_tFileOutputDelimited_1 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_1 = true;
							java.io.File filetFileOutputDelimited_1 = new java.io.File(
									fileName_tFileOutputDelimited_1);
							globalMap.put("tFileOutputDelimited_1_FILE_NAME",
									fileName_tFileOutputDelimited_1);
							if (filetFileOutputDelimited_1.exists()) {
								isFileGenerated_tFileOutputDelimited_1 = false;
							}
							int nb_line_tFileOutputDelimited_1 = 0;
							int splitedFileNo_tFileOutputDelimited_1 = 0;
							int currentRow_tFileOutputDelimited_1 = 0;

							final String OUT_DELIM_tFileOutputDelimited_1 = /**
							 * 
							 * Start field tFileOutputDelimited_1:FIELDSEPARATOR
							 */
							"\t"/**
							 * End field
							 * tFileOutputDelimited_1:FIELDSEPARATOR
							 */
							;

							final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
							 * 
							 * Start field tFileOutputDelimited_1:ROWSEPARATOR
							 */
							"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
							;

							// create directory only if not exists
							if (directory_tFileOutputDelimited_1 != null
									&& directory_tFileOutputDelimited_1.trim()
											.length() != 0) {
								java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
										directory_tFileOutputDelimited_1);
								if (!dir_tFileOutputDelimited_1.exists()) {
									dir_tFileOutputDelimited_1.mkdirs();
								}
							}

							// routines.system.Row
							java.io.Writer outtFileOutputDelimited_1 = null;

							outtFileOutputDelimited_1 = new java.io.BufferedWriter(
									new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(
													fileName_tFileOutputDelimited_1,
													true), "ISO-8859-15"));
							if (filetFileOutputDelimited_1.length() == 0) {
								outtFileOutputDelimited_1.write("STUDY_ID");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_tFileOutputDelimited_1);
								outtFileOutputDelimited_1.write("SUBJ_ID");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_tFileOutputDelimited_1);
								outtFileOutputDelimited_1
										.write("SnpChromosone");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_tFileOutputDelimited_1);
								outtFileOutputDelimited_1.write("SnpId");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_tFileOutputDelimited_1);
								outtFileOutputDelimited_1
										.write("SnpGeneticPosition");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_tFileOutputDelimited_1);
								outtFileOutputDelimited_1
										.write("SnpPhysicalPosition");
								outtFileOutputDelimited_1
										.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
								outtFileOutputDelimited_1.flush();
							}

							resourceMap.put("out_tFileOutputDelimited_1",
									outtFileOutputDelimited_1);
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							/**
							 * [tFileOutputDelimited_1 begin ] stop
							 */

							/**
							 * [tMap_3 begin ] start
							 */

							ok_Hash.put("tMap_3", false);
							start_Hash
									.put("tMap_3", System.currentTimeMillis());

							currentComponent = "tMap_3";

							if (execStat) {
								if (resourceMap.get("inIterateVComp") == null) {

									runStat.updateStatOnConnection("row8"
											+ iterateId, 0, 0);

								}
							}

							int tos_count_tMap_3 = 0;

							class BytesLimit65535_tMap_3 {
								public void limitLog4jByte() throws Exception {

								}
							}

							new BytesLimit65535_tMap_3().limitLog4jByte();

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_3__Struct {
							}
							Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							mapOutStruct mapOut_tmp = new mapOutStruct();
							// ###############################

							/**
							 * [tMap_3 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_4 begin ] start
							 */

							ok_Hash.put("tFileInputDelimited_4", false);
							start_Hash.put("tFileInputDelimited_4",
									System.currentTimeMillis());

							currentComponent = "tFileInputDelimited_4";

							int tos_count_tFileInputDelimited_4 = 0;

							class BytesLimit65535_tFileInputDelimited_4 {
								public void limitLog4jByte() throws Exception {

								}
							}

							new BytesLimit65535_tFileInputDelimited_4()
									.limitLog4jByte();

							final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

							int nb_line_tFileInputDelimited_4 = 0;
							org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
							try {

								Object filename_tFileInputDelimited_4 = "C:/TalendOS/workspace/in.map";
								if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

									int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
									if (footer_value_tFileInputDelimited_4 > 0
											|| random_value_tFileInputDelimited_4 > 0) {
										throw new java.lang.Exception(
												"When the input source is a stream,footer and random shouldn't be bigger than 0.");
									}

								}
								try {
									fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
											"C:/TalendOS/workspace/in.map",
											"US-ASCII", "\t", "\n", false, 1,
											0, -1, -1, false);
								} catch (java.lang.Exception e) {

									System.err.println(e.getMessage());

								}

								while (fid_tFileInputDelimited_4 != null
										&& fid_tFileInputDelimited_4
												.nextRecord()) {
									rowstate_tFileInputDelimited_4.reset();

									row8 = null;

									boolean whetherReject_tFileInputDelimited_4 = false;
									row8 = new row8Struct();
									try {

										int columnIndexWithD_tFileInputDelimited_4 = 0;

										String temp = "";

										columnIndexWithD_tFileInputDelimited_4 = 0;

										row8._Chromosone = fid_tFileInputDelimited_4
												.get(columnIndexWithD_tFileInputDelimited_4);

										columnIndexWithD_tFileInputDelimited_4 = 1;

										row8.SnpId = fid_tFileInputDelimited_4
												.get(columnIndexWithD_tFileInputDelimited_4);

										columnIndexWithD_tFileInputDelimited_4 = 2;

										temp = fid_tFileInputDelimited_4
												.get(columnIndexWithD_tFileInputDelimited_4);
										if (temp.length() > 0) {

											try {

												row8.SnpGenPos = ParserUtils
														.parseTo_Integer(temp);

											} catch (java.lang.Exception ex_tFileInputDelimited_4) {
												rowstate_tFileInputDelimited_4
														.setException(ex_tFileInputDelimited_4);
											}

										} else {

											row8.SnpGenPos = null;

										}

										columnIndexWithD_tFileInputDelimited_4 = 3;

										temp = fid_tFileInputDelimited_4
												.get(columnIndexWithD_tFileInputDelimited_4);
										if (temp.length() > 0) {

											try {

												row8.SnpPhyPos = ParserUtils
														.parseTo_Integer(temp);

											} catch (java.lang.Exception ex_tFileInputDelimited_4) {
												rowstate_tFileInputDelimited_4
														.setException(ex_tFileInputDelimited_4);
											}

										} else {

											row8.SnpPhyPos = null;

										}

										if (rowstate_tFileInputDelimited_4
												.getException() != null) {
											throw rowstate_tFileInputDelimited_4
													.getException();
										}

									} catch (java.lang.Exception e) {
										whetherReject_tFileInputDelimited_4 = true;

										System.err.println(e.getMessage());
										row8 = null;

									}

									/**
									 * [tFileInputDelimited_4 begin ] stop
									 */

									/**
									 * [tFileInputDelimited_4 main ] start
									 */

									currentComponent = "tFileInputDelimited_4";

									tos_count_tFileInputDelimited_4++;

									/**
									 * [tFileInputDelimited_4 main ] stop
									 */
									// Start of branch "row8"
									if (row8 != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										// row8
										// row8

										if (execStat) {
											runStat.updateStatOnConnection(
													"row8" + iterateId, 1, 1);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
											// ###############################
											// # Output tables

											mapOut = null;

											// # Output table : 'mapOut'
											mapOut_tmp.STUDY_ID = globalMap
													.get("pedStudyId")
													.toString();
											mapOut_tmp.SUBJ_ID = globalMap.get(
													"row9.SubjId").toString();
											mapOut_tmp.SnpChromosone = "Chromosone "
													+ row8._Chromosone;
											mapOut_tmp.SnpId = row8.SnpId;
											mapOut_tmp.SnpGeneticPosition = row8.SnpGenPos;
											mapOut_tmp.SnpPhysicalPosition = row8.SnpPhyPos;
											mapOut = mapOut_tmp;
											// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */
										// Start of branch "mapOut"
										if (mapOut != null) {

											/**
											 * [tFileOutputDelimited_1 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_1";

											// mapOut
											// mapOut

											if (execStat) {
												runStat.updateStatOnConnection(
														"mapOut" + iterateId,
														1, 1);
											}

											StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
											if (mapOut.STUDY_ID != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.STUDY_ID);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (mapOut.SUBJ_ID != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.SUBJ_ID);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (mapOut.SnpChromosone != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.SnpChromosone);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (mapOut.SnpId != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.SnpId);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (mapOut.SnpGeneticPosition != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.SnpGeneticPosition);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_tFileOutputDelimited_1);
											if (mapOut.SnpPhysicalPosition != null) {
												sb_tFileOutputDelimited_1
														.append(mapOut.SnpPhysicalPosition);
											}
											sb_tFileOutputDelimited_1
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

											nb_line_tFileOutputDelimited_1++;
											resourceMap
													.put("nb_line_tFileOutputDelimited_1",
															nb_line_tFileOutputDelimited_1);

											outtFileOutputDelimited_1
													.write(sb_tFileOutputDelimited_1
															.toString());

											tos_count_tFileOutputDelimited_1++;

											/**
											 * [tFileOutputDelimited_1 main ]
											 * stop
											 */

										} // End of branch "mapOut"

									} // End of branch "row8"

									/**
									 * [tFileInputDelimited_4 end ] start
									 */

									currentComponent = "tFileInputDelimited_4";

								}
							} finally {
								if (!((Object) ("C:/TalendOS/workspace/in.map") instanceof java.io.InputStream)) {
									if (fid_tFileInputDelimited_4 != null) {
										fid_tFileInputDelimited_4.close();
									}
								}
								if (fid_tFileInputDelimited_4 != null) {
									globalMap.put(
											"tFileInputDelimited_4_NB_LINE",
											fid_tFileInputDelimited_4
													.getRowNumber());

								}
							}

							ok_Hash.put("tFileInputDelimited_4", true);
							end_Hash.put("tFileInputDelimited_4",
									System.currentTimeMillis());

							/**
							 * [tFileInputDelimited_4 end ] stop
							 */

							/**
							 * [tMap_3 end ] start
							 */

							currentComponent = "tMap_3";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							if (execStat) {
								if (resourceMap.get("inIterateVComp") == null
										|| !((Boolean) resourceMap
												.get("inIterateVComp"))) {
									runStat.updateStatOnConnection("row8"
											+ iterateId, 2, 0);
								}
							}

							ok_Hash.put("tMap_3", true);
							end_Hash.put("tMap_3", System.currentTimeMillis());

							/**
							 * [tMap_3 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							if (outtFileOutputDelimited_1 != null) {
								outtFileOutputDelimited_1.flush();
								outtFileOutputDelimited_1.close();
							}

							globalMap.put("tFileOutputDelimited_1_NB_LINE",
									nb_line_tFileOutputDelimited_1);
							globalMap.put("tFileOutputDelimited_1_FILE_NAME",
									fileName_tFileOutputDelimited_1);

							resourceMap.put("finish_tFileOutputDelimited_1",
									true);

							if (execStat) {
								if (resourceMap.get("inIterateVComp") == null
										|| !((Boolean) resourceMap
												.get("inIterateVComp"))) {
									runStat.updateStatOnConnection("mapOut"
											+ iterateId, 2, 0);
								}
							}

							ok_Hash.put("tFileOutputDelimited_1", true);
							end_Hash.put("tFileOutputDelimited_1",
									System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_1 end ] stop
							 */

							if (execStat) {
								runStat.updateStatOnConnection(
										"iterate2",
										2,
										"exec"
												+ NB_ITERATE_tFileInputDelimited_4);
							}

						} // End of branch "row9"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/TalendOS/workspace/in.ped") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				class BytesLimit65535_tJava_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_2().limitLog4jByte();

				String mappingFile = "";
				mappingFile += "filename\tcategory_cd\tcol_nbr\tdata_label\n";
				mappingFile += "pedOut.txt\t\t1\tSTUDY_ID\n";
				mappingFile += "pedOut.txt\t\t2\tSUBJ_ID\n";
				mappingFile += "pedOut.txt\tSubjects+Family\t3\tFamily Id\n";
				mappingFile += "pedOut.txt\tSubjects+Family\t4\tSubject Id\n";
				mappingFile += "pedOut.txt\tSubjects+Family\t5\tPaternal Id\n";
				mappingFile += "pedOut.txt\tSubjects+Family\t6\tMaternal Id\n";
				mappingFile += "pedOut.txt\tSubjects+Demographics\t7\tSex\n";
				mappingFile += "pedOut.txt\tSubjects+Affection Data\t8\tAffection Status\n";

				Integer genoNum = (Integer) globalMap.get("genoNumber");
				for (int i = 0; i < genoNum; i++) {
					mappingFile += "pedOut.txt\tSubjects+Affection Data\t"
							+ (9 + i) + "\t"
							+ String.valueOf(globalMap.get("geno" + (i + 1)))
							+ "\n";
				}

				// mappingFile += "mapOut.txt\t\t1\tSTUDY_ID\n";
				// mappingFile += "mapOut.txt\t\t2\tSUBJ_ID\n";
				// mappingFile +=
				// "mapOut.txt\tSubjects+SNP_Data\t3\tSNP Chromosone\n";
				// mappingFile +=
				// "mapOut.txt\tSubjects+SNP_Data\t4\tSNP Marker Id\n";
				// mappingFile +=
				// "mapOut.txt\tSubjects+SNP_Data\t5\tSNP Genetic Position\n";
				// mappingFile +=
				// "mapOut.txt\tSubjects+SNP_Data\t6\tSNP Physical Position\n";

				try {
					BufferedWriter out = new BufferedWriter(new FileWriter(
							"C:/TalendOS/workspace/attachToMappingFile.txt"));
					out.write(mappingFile);
					out.close();
				} catch (IOException e) {
					System.err.println("Could not save mapping file!");
				}

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				class BytesLimit65535_tPostjob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPostjob_1().limitLog4jByte();

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class pedOutStruct implements
			routines.system.IPersistableRow<pedOutStruct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String STUDYIDColumn;

		public String getSTUDYIDColumn() {
			return this.STUDYIDColumn;
		}

		public String SUBJIDColumn;

		public String getSUBJIDColumn() {
			return this.SUBJIDColumn;
		}

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.STUDYIDColumn == null) ? 0
								: this.STUDYIDColumn.hashCode());

				result = prime
						* result
						+ ((this.SUBJIDColumn == null) ? 0 : this.SUBJIDColumn
								.hashCode());

				result = prime
						* result
						+ ((this.Column0 == null) ? 0 : this.Column0.hashCode());

				result = prime
						* result
						+ ((this.Column1 == null) ? 0 : this.Column1.hashCode());

				result = prime
						* result
						+ ((this.Column2 == null) ? 0 : this.Column2.hashCode());

				result = prime
						* result
						+ ((this.Column3 == null) ? 0 : this.Column3.hashCode());

				result = prime
						* result
						+ ((this.Column4 == null) ? 0 : this.Column4.hashCode());

				result = prime
						* result
						+ ((this.Column5 == null) ? 0 : this.Column5.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final pedOutStruct other = (pedOutStruct) obj;

			if (this.STUDYIDColumn == null) {
				if (other.STUDYIDColumn != null)
					return false;

			} else if (!this.STUDYIDColumn.equals(other.STUDYIDColumn))

				return false;

			if (this.SUBJIDColumn == null) {
				if (other.SUBJIDColumn != null)
					return false;

			} else if (!this.SUBJIDColumn.equals(other.SUBJIDColumn))

				return false;

			if (this.Column0 == null) {
				if (other.Column0 != null)
					return false;

			} else if (!this.Column0.equals(other.Column0))

				return false;

			if (this.Column1 == null) {
				if (other.Column1 != null)
					return false;

			} else if (!this.Column1.equals(other.Column1))

				return false;

			if (this.Column2 == null) {
				if (other.Column2 != null)
					return false;

			} else if (!this.Column2.equals(other.Column2))

				return false;

			if (this.Column3 == null) {
				if (other.Column3 != null)
					return false;

			} else if (!this.Column3.equals(other.Column3))

				return false;

			if (this.Column4 == null) {
				if (other.Column4 != null)
					return false;

			} else if (!this.Column4.equals(other.Column4))

				return false;

			if (this.Column5 == null) {
				if (other.Column5 != null)
					return false;

			} else if (!this.Column5.equals(other.Column5))

				return false;

			return true;
		}

		public void copyDataTo(pedOutStruct other) {

			other.STUDYIDColumn = this.STUDYIDColumn;
			other.SUBJIDColumn = this.SUBJIDColumn;
			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;
			other.Column6 = this.Column6;
			other.Column7 = this.Column7;
			other.Column8 = this.Column8;
			other.Column9 = this.Column9;
			other.Column10 = this.Column10;
			other.Column11 = this.Column11;
			other.Column12 = this.Column12;
			other.Column13 = this.Column13;

		}

		public void copyKeysDataTo(pedOutStruct other) {

			other.STUDYIDColumn = this.STUDYIDColumn;
			other.SUBJIDColumn = this.SUBJIDColumn;
			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.STUDYIDColumn = readString(dis);

					this.SUBJIDColumn = readString(dis);

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STUDYIDColumn, dos);

				// String

				writeString(this.SUBJIDColumn, dos);

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STUDYIDColumn=" + STUDYIDColumn);
			sb.append(",SUBJIDColumn=" + SUBJIDColumn);
			sb.append(",Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pedOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.STUDYIDColumn,
					other.STUDYIDColumn);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SUBJIDColumn,
					other.SUBJIDColumn);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column0, other.Column0);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column1, other.Column1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column2, other.Column2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column3, other.Column3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column4, other.Column4);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column5, other.Column5);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Column0 == null) ? 0 : this.Column0.hashCode());

				result = prime
						* result
						+ ((this.Column1 == null) ? 0 : this.Column1.hashCode());

				result = prime
						* result
						+ ((this.Column2 == null) ? 0 : this.Column2.hashCode());

				result = prime
						* result
						+ ((this.Column3 == null) ? 0 : this.Column3.hashCode());

				result = prime
						* result
						+ ((this.Column4 == null) ? 0 : this.Column4.hashCode());

				result = prime
						* result
						+ ((this.Column5 == null) ? 0 : this.Column5.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Column0 == null) {
				if (other.Column0 != null)
					return false;

			} else if (!this.Column0.equals(other.Column0))

				return false;

			if (this.Column1 == null) {
				if (other.Column1 != null)
					return false;

			} else if (!this.Column1.equals(other.Column1))

				return false;

			if (this.Column2 == null) {
				if (other.Column2 != null)
					return false;

			} else if (!this.Column2.equals(other.Column2))

				return false;

			if (this.Column3 == null) {
				if (other.Column3 != null)
					return false;

			} else if (!this.Column3.equals(other.Column3))

				return false;

			if (this.Column4 == null) {
				if (other.Column4 != null)
					return false;

			} else if (!this.Column4.equals(other.Column4))

				return false;

			if (this.Column5 == null) {
				if (other.Column5 != null)
					return false;

			} else if (!this.Column5.equals(other.Column5))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;
			other.Column6 = this.Column6;
			other.Column7 = this.Column7;
			other.Column8 = this.Column8;
			other.Column9 = this.Column9;
			other.Column10 = this.Column10;
			other.Column11 = this.Column11;
			other.Column12 = this.Column12;
			other.Column13 = this.Column13;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Column0, other.Column0);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column1, other.Column1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column2, other.Column2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column3, other.Column3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column4, other.Column4);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column5, other.Column5);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Column0;

		public String getColumn0() {
			return this.Column0;
		}

		public String Column1;

		public String getColumn1() {
			return this.Column1;
		}

		public String Column2;

		public String getColumn2() {
			return this.Column2;
		}

		public String Column3;

		public String getColumn3() {
			return this.Column3;
		}

		public String Column4;

		public String getColumn4() {
			return this.Column4;
		}

		public String Column5;

		public String getColumn5() {
			return this.Column5;
		}

		public String Column6;

		public String getColumn6() {
			return this.Column6;
		}

		public String Column7;

		public String getColumn7() {
			return this.Column7;
		}

		public String Column8;

		public String getColumn8() {
			return this.Column8;
		}

		public String Column9;

		public String getColumn9() {
			return this.Column9;
		}

		public String Column10;

		public String getColumn10() {
			return this.Column10;
		}

		public String Column11;

		public String getColumn11() {
			return this.Column11;
		}

		public String Column12;

		public String getColumn12() {
			return this.Column12;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.Column0 == null) ? 0 : this.Column0.hashCode());

				result = prime
						* result
						+ ((this.Column1 == null) ? 0 : this.Column1.hashCode());

				result = prime
						* result
						+ ((this.Column2 == null) ? 0 : this.Column2.hashCode());

				result = prime
						* result
						+ ((this.Column3 == null) ? 0 : this.Column3.hashCode());

				result = prime
						* result
						+ ((this.Column4 == null) ? 0 : this.Column4.hashCode());

				result = prime
						* result
						+ ((this.Column5 == null) ? 0 : this.Column5.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

			if (this.Column0 == null) {
				if (other.Column0 != null)
					return false;

			} else if (!this.Column0.equals(other.Column0))

				return false;

			if (this.Column1 == null) {
				if (other.Column1 != null)
					return false;

			} else if (!this.Column1.equals(other.Column1))

				return false;

			if (this.Column2 == null) {
				if (other.Column2 != null)
					return false;

			} else if (!this.Column2.equals(other.Column2))

				return false;

			if (this.Column3 == null) {
				if (other.Column3 != null)
					return false;

			} else if (!this.Column3.equals(other.Column3))

				return false;

			if (this.Column4 == null) {
				if (other.Column4 != null)
					return false;

			} else if (!this.Column4.equals(other.Column4))

				return false;

			if (this.Column5 == null) {
				if (other.Column5 != null)
					return false;

			} else if (!this.Column5.equals(other.Column5))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_1Struct other) {

			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;
			other.Column6 = this.Column6;
			other.Column7 = this.Column7;
			other.Column8 = this.Column8;
			other.Column9 = this.Column9;
			other.Column10 = this.Column10;
			other.Column11 = this.Column11;
			other.Column12 = this.Column12;
			other.Column13 = this.Column13;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

			other.Column0 = this.Column0;
			other.Column1 = this.Column1;
			other.Column2 = this.Column2;
			other.Column3 = this.Column3;
			other.Column4 = this.Column4;
			other.Column5 = this.Column5;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.Column0 = readString(dis);

					this.Column1 = readString(dis);

					this.Column2 = readString(dis);

					this.Column3 = readString(dis);

					this.Column4 = readString(dis);

					this.Column5 = readString(dis);

					this.Column6 = readString(dis);

					this.Column7 = readString(dis);

					this.Column8 = readString(dis);

					this.Column9 = readString(dis);

					this.Column10 = readString(dis);

					this.Column11 = readString(dis);

					this.Column12 = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Column0, dos);

				// String

				writeString(this.Column1, dos);

				// String

				writeString(this.Column2, dos);

				// String

				writeString(this.Column3, dos);

				// String

				writeString(this.Column4, dos);

				// String

				writeString(this.Column5, dos);

				// String

				writeString(this.Column6, dos);

				// String

				writeString(this.Column7, dos);

				// String

				writeString(this.Column8, dos);

				// String

				writeString(this.Column9, dos);

				// String

				writeString(this.Column10, dos);

				// String

				writeString(this.Column11, dos);

				// String

				writeString(this.Column12, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Column0=" + Column0);
			sb.append(",Column1=" + Column1);
			sb.append(",Column2=" + Column2);
			sb.append(",Column3=" + Column3);
			sb.append(",Column4=" + Column4);
			sb.append(",Column5=" + Column5);
			sb.append(",Column6=" + Column6);
			sb.append(",Column7=" + Column7);
			sb.append(",Column8=" + Column8);
			sb.append(",Column9=" + Column9);
			sb.append(",Column10=" + Column10);
			sb.append(",Column11=" + Column11);
			sb.append(",Column12=" + Column12);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Column0, other.Column0);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column1, other.Column1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column2, other.Column2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column3, other.Column3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column4, other.Column4);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Column5, other.Column5);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tHashInput_1Process(globalMap);

				row5Struct row5 = new row5Struct();
				row7Struct row7 = new row7Struct();
				pedOutStruct pedOut = new pedOutStruct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("pedOut" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				class BytesLimit65535_tFileOutputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/TalendOS/workspace/pedOut.txt")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_2
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_5 = 0;

				class BytesLimit65535_tMap_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_5().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				tHash_Lookup_row4.initGet();

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				pedOutStruct pedOut_tmp = new pedOutStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				class BytesLimit65535_tJavaRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_2().limitLog4jByte();

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/TalendOS/workspace/in.ped";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/TalendOS/workspace/in.ped", "US-ASCII",
								"\t", "\n", false, 0, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row5 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row5 = new row5Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row5.Column0 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row5.Column1 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row5.Column2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row5.Column3 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row5.Column4 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row5.Column5 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row5.Column6 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row5.Column7 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row5.Column8 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row5.Column9 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row5.Column10 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row5.Column11 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row5.Column12 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row5.Column13 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row5 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							Integer rowNumber = (Integer) globalMap
									.get("pedRowNumber");
							if (rowNumber == null) {
								rowNumber = Integer.valueOf(1);
								globalMap.put("pedRowNumber", rowNumber);
							} else {
								globalMap.put("pedRowNumber", rowNumber + 1);
							}

							row7.Column0 = row5.Column0;
							row7.Column1 = row5.Column1;
							row7.Column2 = row5.Column2;
							row7.Column3 = row5.Column3;
							row7.Column4 = row5.Column4;
							row7.Column5 = row5.Column5;
							row7.Column6 = row5.Column6;
							row7.Column7 = row5.Column7;
							row7.Column8 = row5.Column8;
							row7.Column9 = row5.Column9;
							row7.Column10 = row5.Column10;
							row7.Column11 = row5.Column11;
							row7.Column12 = row5.Column12;
							row7.Column13 = row5.Column13;
							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tMap_5 main ] start
							 */

							currentComponent = "tMap_5";

							// row7
							// row7

							if (execStat) {
								runStat.updateStatOnConnection("row7"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_5 = false;
							boolean mainRowRejected_tMap_5 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row4"
							// /////////////////////////////////////////////

							boolean forceLooprow4 = false;

							row4Struct row4ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								tHash_Lookup_row4.lookup(row4HashKey);

								if (!tHash_Lookup_row4.hasNext()) { // G_TM_M_090

									forceLooprow4 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow4 = true;
							} // G 21

							row4Struct row4 = null;

							while ((tHash_Lookup_row4 != null && tHash_Lookup_row4
									.hasNext()) || forceLooprow4) { // G_TM_M_043

								// CALL close loop of lookup 'row4'

								row4Struct fromLookup_row4 = null;
								row4 = row4Default;

								if (!forceLooprow4) { // G 46

									fromLookup_row4 = tHash_Lookup_row4.next();

									if (fromLookup_row4 != null) {
										row4 = fromLookup_row4;
									}

								} // G 46

								forceLooprow4 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									pedOut = null;

									// # Output table : 'pedOut'
									pedOut_tmp.STUDYIDColumn = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "STUDY_ID"
											: globalMap.get("pedStudyId")
													.toString();
									pedOut_tmp.SUBJIDColumn = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "SUBJ_ID"
											: row7.Column1;
									pedOut_tmp.Column0 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Familiy Id"
											: (row7.Column0.equals("0") ? "None"
													: row7.Column0);
									pedOut_tmp.Column1 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Subject Id"
											: row7.Column1;
									pedOut_tmp.Column2 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Paternal Id"
											: (row7.Column2.equals("0") ? "None"
													: row7.Column2);
									pedOut_tmp.Column3 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Maternal Id"
											: (row7.Column3.equals("0") ? "None"
													: row7.Column3);
									pedOut_tmp.Column4 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Sex"
											: (row7.Column4.equals("1") ? "male"
													: (row7.Column4.equals("2") ? "female"
															: "unknown"));
									pedOut_tmp.Column5 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? "Affection Status"
											: (row7.Column5.equals("1") ? "false"
													: (row7.Column5.equals("2") ? "true"
															: "missing"));
									pedOut_tmp.Column6 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader1
											: row7.Column6;
									pedOut_tmp.Column7 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader2
											: row7.Column7;
									pedOut_tmp.Column8 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader3
											: row7.Column8;
									pedOut_tmp.Column9 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader4
											: row7.Column9;
									pedOut_tmp.Column10 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader5
											: row7.Column10;
									pedOut_tmp.Column11 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader6
											: row7.Column11;
									pedOut_tmp.Column12 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader7
											: row7.Column12;
									pedOut_tmp.Column13 = globalMap.get(
											"pedRowNumber").equals(
											Integer.valueOf(1)) ? row4.geneHeader8
											: row7.Column13;
									pedOut = pedOut_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */
								// Start of branch "pedOut"
								if (pedOut != null) {

									/**
									 * [tFileOutputDelimited_2 main ] start
									 */

									currentComponent = "tFileOutputDelimited_2";

									// pedOut
									// pedOut

									if (execStat) {
										runStat.updateStatOnConnection("pedOut"
												+ iterateId, 1, 1);
									}

									StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
									if (pedOut.STUDYIDColumn != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.STUDYIDColumn);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.SUBJIDColumn != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.SUBJIDColumn);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column0 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column0);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column1 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column1);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column2 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column2);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column3 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column3);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column4 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column4);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column5 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column5);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column6 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column6);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column7 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column7);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column8 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column8);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column9 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column9);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column10 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column10);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column11 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column11);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column12 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column12);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_tFileOutputDelimited_2);
									if (pedOut.Column13 != null) {
										sb_tFileOutputDelimited_2
												.append(pedOut.Column13);
									}
									sb_tFileOutputDelimited_2
											.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

									nb_line_tFileOutputDelimited_2++;
									resourceMap.put(
											"nb_line_tFileOutputDelimited_2",
											nb_line_tFileOutputDelimited_2);

									outtFileOutputDelimited_2
											.write(sb_tFileOutputDelimited_2
													.toString());

									tos_count_tFileOutputDelimited_2++;

									/**
									 * [tFileOutputDelimited_2 main ] stop
									 */

								} // End of branch "pedOut"

							} // close loop of lookup 'row4' // G_TM_M_043

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/TalendOS/workspace/in.ped") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("pedOut" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row4");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String geneHeader1;

		public String getGeneHeader1() {
			return this.geneHeader1;
		}

		public String geneHeader2;

		public String getGeneHeader2() {
			return this.geneHeader2;
		}

		public String geneHeader3;

		public String getGeneHeader3() {
			return this.geneHeader3;
		}

		public String geneHeader4;

		public String getGeneHeader4() {
			return this.geneHeader4;
		}

		public String geneHeader5;

		public String getGeneHeader5() {
			return this.geneHeader5;
		}

		public String geneHeader6;

		public String getGeneHeader6() {
			return this.geneHeader6;
		}

		public String geneHeader7;

		public String getGeneHeader7() {
			return this.geneHeader7;
		}

		public String geneHeader8;

		public String getGeneHeader8() {
			return this.geneHeader8;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.geneHeader1 = readString(dis);

					this.geneHeader2 = readString(dis);

					this.geneHeader3 = readString(dis);

					this.geneHeader4 = readString(dis);

					this.geneHeader5 = readString(dis);

					this.geneHeader6 = readString(dis);

					this.geneHeader7 = readString(dis);

					this.geneHeader8 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.geneHeader1, dos);

				// String

				writeString(this.geneHeader2, dos);

				// String

				writeString(this.geneHeader3, dos);

				// String

				writeString(this.geneHeader4, dos);

				// String

				writeString(this.geneHeader5, dos);

				// String

				writeString(this.geneHeader6, dos);

				// String

				writeString(this.geneHeader7, dos);

				// String

				writeString(this.geneHeader8, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("geneHeader1=" + geneHeader1);
			sb.append(",geneHeader2=" + geneHeader2);
			sb.append(",geneHeader3=" + geneHeader3);
			sb.append(",geneHeader4=" + geneHeader4);
			sb.append(",geneHeader5=" + geneHeader5);
			sb.append(",geneHeader6=" + geneHeader6);
			sb.append(",geneHeader7=" + geneHeader7);
			sb.append(",geneHeader8=" + geneHeader8);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash
						.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tAdvancedHash_row4 = 0;

				class BytesLimit65535_tAdvancedHash_row4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

				// connection name:row4
				// source node:tHashInput_1 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_5 - inputs:(row7,row4) outputs:(pedOut)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct> getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tHashInput_1 begin ] start
				 */

				ok_Hash.put("tHashInput_1", false);
				start_Hash.put("tHashInput_1", System.currentTimeMillis());

				currentComponent = "tHashInput_1";

				int tos_count_tHashInput_1 = 0;

				class BytesLimit65535_tHashInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tHashInput_1().limitLog4jByte();

				int nb_line_tHashInput_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<pedGeneHeaderStruct> tHashFile_tHashInput_1 = mf_tHashInput_1
						.getAdvancedMemoryHashFile("tHashFile_PedMapToTranSMART_"
								+ pid + "_tHashOutput_1");
				if (tHashFile_tHashInput_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<pedGeneHeaderStruct> iterator_tHashInput_1 = tHashFile_tHashInput_1
						.iterator();
				while (iterator_tHashInput_1.hasNext()) {
					pedGeneHeaderStruct next_tHashInput_1 = iterator_tHashInput_1
							.next();

					row4.geneHeader1 = next_tHashInput_1.GeneHeader1;
					row4.geneHeader2 = next_tHashInput_1.GeneHeader2;
					row4.geneHeader3 = next_tHashInput_1.GeneHeader3;
					row4.geneHeader4 = next_tHashInput_1.GeneHeader4;
					row4.geneHeader5 = next_tHashInput_1.GeneHeader5;
					row4.geneHeader6 = next_tHashInput_1.GeneHeader6;
					row4.geneHeader7 = next_tHashInput_1.GeneHeader7;
					row4.geneHeader8 = next_tHashInput_1.GeneHeader8;

					/**
					 * [tHashInput_1 begin ] stop
					 */

					/**
					 * [tHashInput_1 main ] start
					 */

					currentComponent = "tHashInput_1";

					tos_count_tHashInput_1++;

					/**
					 * [tHashInput_1 main ] stop
					 */

					/**
					 * [tAdvancedHash_row4 main ] start
					 */

					currentComponent = "tAdvancedHash_row4";

					// row4
					// row4

					if (execStat) {
						runStat.updateStatOnConnection("row4" + iterateId, 1, 1);
					}

					row4Struct row4_HashRow = new row4Struct();

					row4_HashRow.geneHeader1 = row4.geneHeader1;

					row4_HashRow.geneHeader2 = row4.geneHeader2;

					row4_HashRow.geneHeader3 = row4.geneHeader3;

					row4_HashRow.geneHeader4 = row4.geneHeader4;

					row4_HashRow.geneHeader5 = row4.geneHeader5;

					row4_HashRow.geneHeader6 = row4.geneHeader6;

					row4_HashRow.geneHeader7 = row4.geneHeader7;

					row4_HashRow.geneHeader8 = row4.geneHeader8;

					tHash_Lookup_row4.put(row4_HashRow);

					tos_count_tAdvancedHash_row4++;

					/**
					 * [tAdvancedHash_row4 main ] stop
					 */

					/**
					 * [tHashInput_1 end ] start
					 */

					currentComponent = "tHashInput_1";

					nb_line_tHashInput_1++;
				}

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_PedMapToTranSMART_" + pid
								+ "_tHashOutput_1");

				globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);

				ok_Hash.put("tHashInput_1", true);
				end_Hash.put("tHashInput_1", System.currentTimeMillis());

				/**
				 * [tHashInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_1 finally ] start
				 */

				currentComponent = "tHashInput_1";

				/**
				 * [tHashInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				class BytesLimit65535_tPrejob_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tPrejob_1().limitLog4jByte();

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SnpId;

		public String getSnpId() {
			return this.SnpId;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.SnpId == null) ? 0 : this.SnpId.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.SnpId == null) {
				if (other.SnpId != null)
					return false;

			} else if (!this.SnpId.equals(other.SnpId))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.SnpId = this.SnpId;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.SnpId = this.SnpId;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.SnpId = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SnpId, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SnpId=" + SnpId);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SnpId, other.SnpId);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String _Chromosone;

		public String get_Chromosone() {
			return this._Chromosone;
		}

		public String SnpId;

		public String getSnpId() {
			return this.SnpId;
		}

		public Integer SnpGenPos;

		public Integer getSnpGenPos() {
			return this.SnpGenPos;
		}

		public Integer SnpPhyPos;

		public Integer getSnpPhyPos() {
			return this.SnpPhyPos;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this._Chromosone == null) ? 0 : this._Chromosone
								.hashCode());

				result = prime * result
						+ ((this.SnpId == null) ? 0 : this.SnpId.hashCode());

				result = prime
						* result
						+ ((this.SnpGenPos == null) ? 0 : this.SnpGenPos
								.hashCode());

				result = prime
						* result
						+ ((this.SnpPhyPos == null) ? 0 : this.SnpPhyPos
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this._Chromosone == null) {
				if (other._Chromosone != null)
					return false;

			} else if (!this._Chromosone.equals(other._Chromosone))

				return false;

			if (this.SnpId == null) {
				if (other.SnpId != null)
					return false;

			} else if (!this.SnpId.equals(other.SnpId))

				return false;

			if (this.SnpGenPos == null) {
				if (other.SnpGenPos != null)
					return false;

			} else if (!this.SnpGenPos.equals(other.SnpGenPos))

				return false;

			if (this.SnpPhyPos == null) {
				if (other.SnpPhyPos != null)
					return false;

			} else if (!this.SnpPhyPos.equals(other.SnpPhyPos))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other._Chromosone = this._Chromosone;
			other.SnpId = this.SnpId;
			other.SnpGenPos = this.SnpGenPos;
			other.SnpPhyPos = this.SnpPhyPos;

		}

		public void copyKeysDataTo(row3Struct other) {

			other._Chromosone = this._Chromosone;
			other.SnpId = this.SnpId;
			other.SnpGenPos = this.SnpGenPos;
			other.SnpPhyPos = this.SnpPhyPos;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this._Chromosone = readString(dis);

					this.SnpId = readString(dis);

					this.SnpGenPos = readInteger(dis);

					this.SnpPhyPos = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Chromosone, dos);

				// String

				writeString(this.SnpId, dos);

				// Integer

				writeInteger(this.SnpGenPos, dos);

				// Integer

				writeInteger(this.SnpPhyPos, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Chromosone=" + _Chromosone);
			sb.append(",SnpId=" + SnpId);
			sb.append(",SnpGenPos=" + String.valueOf(SnpGenPos));
			sb.append(",SnpPhyPos=" + String.valueOf(SnpPhyPos));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this._Chromosone,
					other._Chromosone);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpId, other.SnpId);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpGenPos, other.SnpGenPos);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.SnpPhyPos, other.SnpPhyPos);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tJava_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowToIterate_1 = 0;

				class BytesLimit65535_tFlowToIterate_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tFilterColumns_1 = 0;

				class BytesLimit65535_tFilterColumns_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFilterColumns_1().limitLog4jByte();

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/TalendOS/workspace/in.map";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/TalendOS/workspace/in.map", "US-ASCII",
								"\t", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row3._Chromosone = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row3.SnpId = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.SnpGenPos = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								row3.SnpGenPos = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.SnpPhyPos = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								row3.SnpPhyPos = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFilterColumns_1 main ] start
							 */

							currentComponent = "tFilterColumns_1";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3"
										+ iterateId, 1, 1);
							}

							row2.SnpId = row3.SnpId;

							nb_line_tFilterColumns_1++;

							tos_count_tFilterColumns_1++;

							/**
							 * [tFilterColumns_1 main ] stop
							 */

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							globalMap.put("row2.SnpId", row2.SnpId);

							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
									counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */
							NB_ITERATE_tJava_1++;

							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 1,
										"exec" + NB_ITERATE_tJava_1);
								// Thread.sleep(1000);
							}

							/**
							 * [tJava_1 begin ] start
							 */

							ok_Hash.put("tJava_1", false);
							start_Hash.put("tJava_1",
									System.currentTimeMillis());

							currentComponent = "tJava_1";

							int tos_count_tJava_1 = 0;

							class BytesLimit65535_tJava_1 {
								public void limitLog4jByte() throws Exception {

								}
							}

							new BytesLimit65535_tJava_1().limitLog4jByte();

							String snpId = (String) globalMap.get("row2.SnpId");

							Integer currVal = ((Integer) globalMap
									.get("tFlowToIterate_1_CURRENT_ITERATION"));
							globalMap.put("geno" + currVal, snpId);

							globalMap.put("genoNumber", currVal);

							/**
							 * [tJava_1 begin ] stop
							 */

							/**
							 * [tJava_1 main ] start
							 */

							currentComponent = "tJava_1";

							tos_count_tJava_1++;

							/**
							 * [tJava_1 main ] stop
							 */

							/**
							 * [tJava_1 end ] start
							 */

							currentComponent = "tJava_1";

							ok_Hash.put("tJava_1", true);
							end_Hash.put("tJava_1", System.currentTimeMillis());

							/**
							 * [tJava_1 end ] stop
							 */
							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 2,
										"exec" + NB_ITERATE_tJava_1);
							}

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/TalendOS/workspace/in.map") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputDelimited_6Process(globalMap);

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[0];

		public String STUDY_ID;

		public String getSTUDY_ID() {
			return this.STUDY_ID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_PedMapToTranSMART.length == 0) {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_PedMapToTranSMART,
						0, length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_PedMapToTranSMART, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_PedMapToTranSMART) {

				try {

					int length = 0;

					this.STUDY_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.STUDY_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("STUDY_ID=" + STUDY_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				class BytesLimit65535_tFileInputDelimited_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_6().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = "C:/TalendOS/workspace/in.study";
					if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
						if (footer_value_tFileInputDelimited_6 > 0
								|| random_value_tFileInputDelimited_6 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
								"C:/TalendOS/workspace/in.study", "US-ASCII",
								"\t", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_6 != null
							&& fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();

						row10 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row10 = new row10Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_6 = 0;

							columnIndexWithD_tFileInputDelimited_6 = 0;

							row10.STUDY_ID = fid_tFileInputDelimited_6
									.get(columnIndexWithD_tFileInputDelimited_6);

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row10 = null;

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */
						// Start of branch "row10"
						if (row10 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							// row10
							// row10

							if (execStat) {
								runStat.updateStatOnConnection("row10"
										+ iterateId, 1, 1);
							}

							// code sample:
							//
							// multiply by 2 the row identifier
							// output_row.id = row10.id * 2;
							//
							// lowercase the name
							// output_row.name = row10.name.toLowerCase();

							globalMap.put("pedStudyId", row10.STUDY_ID);

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

						} // End of branch "row10"

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

					}
				} finally {
					if (!((Object) ("C:/TalendOS/workspace/in.study") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								fid_tFileInputDelimited_6.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final PedMapToTranSMART PedMapToTranSMARTClass = new PedMapToTranSMART();

		int exitCode = PedMapToTranSMARTClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = PedMapToTranSMART.class
					.getClassLoader().getResourceAsStream(
							"local_project/pedmaptotransmart_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_5.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : PedMapToTranSMART");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 256400 characters generated by Talend Open Studio for Data Integration on the
 * 13. Dezember 2017 01:31:46 MEZ
 ************************************************************************************************/
